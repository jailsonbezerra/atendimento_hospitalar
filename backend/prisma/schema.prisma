// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Usuario {
  id String @id @default(uuid())
  email String @unique @db.VarChar(255)
  nome String @db.VarChar(255)
  hash_senha String
  papel Papel

  medico Medico?
  atendente Atendente?

  @@map("usuarios")
}

model Paciente {
  id String @id @default(uuid())
  sus String @unique
  nome String
  data_nascimento DateTime
  sexo Sexo

  cadastro CadastroPaciente[]  
  atendimento Atendimento[]

  @@map("pacientes")
}

model CadastroPaciente {
  id String @id @default(uuid())
  prioridade Prioridade @default(NAO_URGENTE)
  paciente_id String
  status_triagem StatusTriagem @default(AGUARDANDO)
  status_atendimento StatusAtendimento @default(AGUARDANDO)

  triagem Triagem?

  paciente Paciente @relation(fields: [paciente_id], references: [id], onDelete: Cascade)

  @@map("cadastro_pacientes")
}

model Medico {
  id String @id @default(uuid())
  prm String @unique
  usuario_id String @unique

  atendimento Atendimento[]

  usuario Usuario @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@map("medicos")
}

model Atendente {
  id String @id @default(uuid())
  corem String @unique
  usuario_id String @unique

  triagem Triagem[]

  usuario Usuario @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@map("atendentes")
}

model Triagem {
  id String @id @default(uuid())
  peso Decimal @db.Decimal(8, 2)
  altura Decimal @db.Decimal(8, 2)
  temperatura Int
  pressao String
  cadastro_id String @unique
  atendente_id String
  data_inicio DateTime @default(now())
  data_fim DateTime?

  atendimento Atendimento?

  cadastro CadastroPaciente  @relation(fields: [cadastro_id], references: [id], onDelete: Cascade)
  atendente Atendente @relation(fields: [atendente_id], references: [id], onDelete: Cascade)
  
  @@map("triagens")
}

model Atendimento {
  id String @id @default(uuid())
  triagem_id String? @unique
  medico_id String
  paciente_id String
  data_inicio DateTime @default(now())
  data_fim DateTime?

  diagnostico Diagnostico[]
  medicacao Medicacao[]

  triagem Triagem? @relation(fields: [triagem_id], references: [id], onDelete: Cascade)
  medico Medico @relation(fields: [medico_id], references: [id], onDelete: Cascade)
  paciente Paciente @relation(fields: [paciente_id], references: [id], onDelete: Cascade)

  @@map("atendimentos")
}

model Diagnostico {
  id String @id @default(uuid())
  diagnostico String
  atendimento_id String

  atendimento Atendimento @relation(fields: [atendimento_id], references: [id], onDelete: Cascade)

  @@map("diagnosticos")
}

model Medicacao {
  id String @id @default(uuid())
  medicacao String
  atendimento_id String

  atendimento Atendimento @relation(fields: [atendimento_id], references: [id], onDelete: Cascade)

  @@map("medicacoes")
}

enum Papel {
  ATENDENTE
  MEDICO
  ADMIN
}

enum Sexo {
  MASCULINO
  FEMININO
}

enum Prioridade {
  NAO_URGENTE
  POUCO_URGENTE
  URGENTE
  MUITO_URGENTE
  EMERGENCIA
}

enum StatusTriagem {
  AGUARDANDO
  EM_ANDAMENTO
  CONCLUIDA
}

enum StatusAtendimento {
  AGUARDANDO
  EM_ANDAMENTO
  CONCLUIDO
}